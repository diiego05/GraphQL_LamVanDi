package com.alotra.controller.api;

import com.alotra.dto.BranchDTO;
import com.alotra.entity.Branch;
import com.alotra.service.BranchService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import com.alotra.service.AddressService;
import com.alotra.service.UserService;
import org.springframework.http.ResponseEntity;
import java.util.List;

@RestController
@RequestMapping("/api/public/branches")
@RequiredArgsConstructor
public class PublicBranchApiController {

    private final BranchService branchService;
    private final AddressService addressService;
    private final UserService userService;

    /**
     * üì¶ L·∫•y danh s√°ch chi nh√°nh kh·∫£ d·ª•ng cho c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng.
     * - Input: List<Long> variantIds
     * - Output: Danh s√°ch Branch ƒë√°p ·ª©ng ƒë·ªß t·∫•t c·∫£ variant
     */
    @PostMapping("/available")
    public List<Branch> getAvailableBranches(@RequestBody List<Long> variantIds) {
        if (variantIds == null || variantIds.isEmpty()) return List.of();
        return branchService.findAvailableBranches(variantIds);
    }


    /**
     * üè™ Ki·ªÉm tra kh·∫£ d·ª•ng c·ªßa c√°c CartItem t·∫°i m·ªôt chi nh√°nh c·ª• th·ªÉ.
     * - Input: branchId + List<Long> cartItemIds
     * - Output: Danh s√°ch cartItemId KH√îNG kh·∫£ d·ª•ng t·∫°i chi nh√°nh
     */
    @PostMapping("/{branchId}/check-availability")
    public List<Long> checkCartItemAvailability(
            @PathVariable Long branchId,
            @RequestBody List<Long> cartItemIds
    ) {
        if (cartItemIds == null || cartItemIds.isEmpty()) {
            return List.of();
        }
        return branchService.checkCartItemAvailability(branchId, cartItemIds);
    }

    @GetMapping("/active")
    public List<BranchDTO> getActiveBranches() {
        return branchService.getAllBranchesActiveDTO();
    }

    @GetMapping("/nearest")
    public ResponseEntity<BranchDTO> getNearestBranch(
            @RequestParam(required = false) Double lat,
            @RequestParam(required = false) Double lng,
            @RequestParam(required = false) Long addressId
    ) {
        System.out.println("üîç [DEBUG] getNearestBranch called - addressId: " + addressId + ", lat: " + lat + ", lng: " + lng);

        Double qLat = lat, qLng = lng;

        // ‚úÖ N·∫øu c√≥ addressId, l·∫•y t·ªça ƒë·ªô t·ª´ address (kh√¥ng c·∫ßn check user)
        if (qLat == null || qLng == null) {
            if (addressId == null) {
                System.out.println("‚ùå [DEBUG] Missing both coordinates and addressId");
                return ResponseEntity.badRequest().build();
            }

            // ‚úÖ Th·ª≠ l·∫•y userId n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
            Long uid = null;
            try {
                uid = userService.getCurrentUserId();
                System.out.println("‚úÖ [DEBUG] User logged in - userId: " + uid);
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è [DEBUG] User not logged in, proceeding without userId");
            }

            // ‚úÖ N·∫øu kh√¥ng c√≥ userId, v·∫´n th·ª≠ l·∫•y t·ªça ƒë·ªô t·ª´ address tr·ª±c ti·∫øp
            var coordsOpt = addressService.getCoordinates(uid, addressId);
            if (coordsOpt.isEmpty()) {
                System.out.println("‚ùå [DEBUG] Cannot find coordinates for addressId: " + addressId);
                return ResponseEntity.notFound().build();
            }
            var coords = coordsOpt.get();
            qLat = coords.latitude();
            qLng = coords.longitude();
            System.out.println("‚úÖ [DEBUG] Got coordinates - lat: " + qLat + ", lng: " + qLng);
        }

        var nearest = branchService.findNearestActiveBranch(qLat, qLng);
        if (nearest != null) {
            System.out.println("‚úÖ [DEBUG] Found nearest branch: " + nearest.getName());
            return ResponseEntity.ok(nearest);
        } else {
            System.out.println("‚ö†Ô∏è [DEBUG] No active branch found near coordinates");
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * üè™ L·∫•y danh s√°ch chi nh√°nh c√≥ s·∫£n ph·∫©m c·ª• th·ªÉ
     * @param productId ID c·ªßa s·∫£n ph·∫©m
     * @return Danh s√°ch chi nh√°nh ACTIVE c√≥ s·∫£n ph·∫©m n√†y
     */
    @GetMapping("/with-product/{productId}")
    public ResponseEntity<List<BranchDTO>> getBranchesWithProduct(@PathVariable Long productId) {
        List<BranchDTO> branches = branchService.findBranchesWithProduct(productId);
        return ResponseEntity.ok(branches);
    }
}
