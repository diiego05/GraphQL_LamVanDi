package com.alotra.controller.api;


import com.alotra.dto.BranchDistanceDTO;
import com.alotra.service.LocationService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/location")
@RequiredArgsConstructor
public class LocationApiController {

    private final LocationService locationService;

    // üìç 1) T√¨m chi nh√°nh g·∫ßn nh·∫•t theo to·∫° ƒë·ªô
    @GetMapping("/nearest")
    public ResponseEntity<List<BranchDistanceDTO>> nearest(
            @RequestParam("lat") double latitude,
            @RequestParam("lng") double longitude,
            @RequestParam(value = "limit", required = false) Integer limit,
            @RequestParam(value = "status", required = false) String status
    ) {
        return ResponseEntity.ok(locationService.findNearestBranches(latitude, longitude, limit, status));
    }

    // üè† 2) T√¨m chi nh√°nh g·∫ßn nh·∫•t theo ƒë·ªãa ch·ªâ vƒÉn b·∫£n t·ª± do
    @GetMapping("/nearest-by-address")
    public ResponseEntity<List<BranchDistanceDTO>> nearestByAddress(
            @RequestParam("address") String address,
            @RequestParam(value = "limit", required = false) Integer limit,
            @RequestParam(value = "status", required = false) String status
    ) {
        return ResponseEntity.ok(locationService.findNearestByAddress(address, limit, status));
    }

    // üë§ 3) T√¨m chi nh√°nh g·∫ßn nh·∫•t cho user hi·ªán t·∫°i (d·ª±a v√†o ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh)
    @GetMapping("/nearest-for-me")
    public ResponseEntity<List<BranchDistanceDTO>> nearestForCurrentUser(
            @RequestParam(value = "limit", required = false) Integer limit,
            @RequestParam(value = "status", required = false) String status
    ) {
        return ResponseEntity.ok(locationService.findNearestForCurrentUser(limit, status));
    }
}