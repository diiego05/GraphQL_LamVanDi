package com.alotra.controller.api;

import com.alotra.dto.OrderDTO;
import com.alotra.dto.OrderStatusHistoryDTO;
import com.alotra.entity.Order;
import com.alotra.entity.OrderStatusHistory;
import com.alotra.entity.ShippingAssignment;
import com.alotra.enums.OrderStatus;
import com.alotra.repository.OrderRepository;
import com.alotra.repository.OrderStatusHistoryRepository;
import com.alotra.repository.ShippingAssignmentRepository;
import com.alotra.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/shipper/orders")
@RequiredArgsConstructor
public class ShipperOrderApiController {

    private final ShippingAssignmentRepository shippingAssignmentRepository;
    private final OrderRepository orderRepository;
    private final OrderStatusHistoryRepository orderStatusHistoryRepository;
    private final UserService userService;

    // ======================= üì¶ L·∫•y danh s√°ch ƒë∆°n ƒë∆∞·ª£c ph√¢n c√¥ng =======================
    @GetMapping
    public List<OrderDTO> getAssignedOrders() {
        Long shipperId = userService.getCurrentShipperId();

        List<Long> orderIds = shippingAssignmentRepository
                .findByShipperIdAndStatusIn(shipperId, List.of("PENDING", "ACCEPTED"))
                .stream()
                .map(ShippingAssignment::getOrderId)
                .toList();

        return orderRepository.findAllById(orderIds).stream()
                .map(this::mapToOrderDTO)
                .toList();
    }

    // ======================= üìÑ L·∫•y chi ti·∫øt ƒë∆°n h√†ng =======================
    @GetMapping("/{id}")
    public ResponseEntity<OrderDTO> getOrderDetail(@PathVariable Long id) {
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));
        return ResponseEntity.ok(mapToOrderDTO(order));
    }

    // ======================= ‚úÖ Shipper nh·∫≠n ƒë∆°n =======================
    @Transactional
    @PutMapping("/{id}/accept")
    public ResponseEntity<?> acceptOrder(@PathVariable Long id) {
        Long shipperId = userService.getCurrentShipperId();

        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        if (!OrderStatus.CONFIRMED.name().equals(order.getStatus())) {
            return ResponseEntity.badRequest().body("ƒê∆°n h√†ng kh√¥ng th·ªÉ nh·∫≠n");
        }

        // ‚úÖ Shipper hi·ªán t·∫°i nh·∫≠n ƒë∆°n
        ShippingAssignment assignment = shippingAssignmentRepository
                .findByOrderIdAndShipperId(id, shipperId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√¢n c√¥ng"));

        assignment.setStatus("ACCEPTED");
        assignment.setAssignedAt(LocalDateTime.now());
        shippingAssignmentRepository.save(assignment);

        // ‚ùå C√°c shipper kh√°c b·ªã kh√≥a
        shippingAssignmentRepository.findByOrderId(id).forEach(a -> {
            if (!a.getShipperId().equals(shipperId)) {
                a.setStatus("LOCKED");
                shippingAssignmentRepository.save(a);
            }
        });

        // üöö C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        order.setStatus(OrderStatus.SHIPPING.name());
        order.setUpdatedAt(LocalDateTime.now());
        orderRepository.save(order);

        // üìù Ghi l·ªãch s·ª≠ tr·∫°ng th√°i
        orderStatusHistoryRepository.save(
                OrderStatusHistory.builder()
                        .order(order)
                        .status(OrderStatus.SHIPPING.name())
                        .note("Shipper ƒë√£ nh·∫≠n ƒë∆°n")
                        .changedAt(LocalDateTime.now())
                        .build()
        );

        return ResponseEntity.ok().build();
    }

    // ======================= üöÄ Giao h√†ng th√†nh c√¥ng =======================
    @Transactional
    @PutMapping("/{id}/delivered")
    public ResponseEntity<?> markDelivered(@PathVariable Long id) {
        Long shipperId = userService.getCurrentShipperId();

        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        if (!OrderStatus.SHIPPING.name().equals(order.getStatus())) {
            return ResponseEntity.badRequest().body("ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i giao h√†ng");
        }

        // ‚úÖ X√°c nh·∫≠n assignment c·ªßa shipper
        ShippingAssignment assignment = shippingAssignmentRepository
                .findByOrderIdAndShipperId(id, shipperId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph√¢n c√¥ng"));

        assignment.setStatus("DELIVERED");
        assignment.setDeliveredAt(LocalDateTime.now());
        shippingAssignmentRepository.save(assignment);

        // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
        order.setStatus(OrderStatus.COMPLETED.name());
        order.setUpdatedAt(LocalDateTime.now());
        orderRepository.save(order);

        // üìù Ghi l·ªãch s·ª≠ tr·∫°ng th√°i (ƒë√∫ng tr·∫°ng th√°i COMPLETED)
        orderStatusHistoryRepository.save(
                OrderStatusHistory.builder()
                        .order(order)
                        .status(OrderStatus.COMPLETED.name())
                        .note("Shipper ƒë√£ giao th√†nh c√¥ng")
                        .changedAt(LocalDateTime.now())
                        .build()
        );

        return ResponseEntity.ok().build();
    }

    // ======================= üß≠ Mapper =======================
    private OrderDTO mapToOrderDTO(Order order) {
        var history = orderStatusHistoryRepository
                .findByOrderIdOrderByChangedAtAsc(order.getId())
                .stream()
                .map(h -> OrderStatusHistoryDTO.builder()
                        .status(h.getStatus())
                        .note(h.getNote())
                        .changedAt(h.getChangedAt())
                        .build())
                .toList();

        return OrderDTO.builder()
                .id(order.getId())
                .code(order.getCode())
                .status(order.getStatus())
                .total(order.getTotal())
                .deliveryAddress(order.getDeliveryAddress())
                .paymentMethod(order.getPaymentMethod())
                .createdAt(order.getCreatedAt())
                .statusHistory(history)
                .build();
    }
}
