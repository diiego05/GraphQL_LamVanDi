package com.alotra.controller;

import java.util.List;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.util.StringUtils;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.FieldError;
import com.alotra.entity.Address;
import com.alotra.entity.Branch;
import com.alotra.entity.Category;
import com.alotra.entity.Role;
import com.alotra.entity.Size;
import com.alotra.entity.Topping;
import com.alotra.entity.User;
import com.alotra.repository.UserRepository;
import com.alotra.service.BranchService;
import com.alotra.service.CategoryService;
import com.alotra.service.SizeService;
import com.alotra.service.UserService;
import com.alotra.service.ToppingService;

import jakarta.validation.Valid;
@Controller
@RequestMapping("/admin")
public class AdminController {

	 @Autowired
	    private BranchService branchService;

	    @Autowired
	    private UserService userService;

	    @Autowired
	    private UserRepository userRepository;
	    @Autowired
	    private CategoryService categoryService;
	    @Autowired
	    private ToppingService toppingService;
	  //... c√°c @Autowired kh√°c
	    @Autowired
	    private SizeService sizeService;
	    @GetMapping

	    public String showAdminRoot() {
	        return "redirect:/admin/dashboard";
	    }

	    @GetMapping("/dashboard")
	    public String showDashboard(Model model) {
	        model.addAttribute("pageTitle", "T·ªïng quan");
	        model.addAttribute("currentPage", "dashboard");
	        return "admin/dashboard";
	    }

	    // --- QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG ---

	    @GetMapping("/users")
	    public String showUserPage(Model model,
	                               @RequestParam(required = false) String keyword,
	                               @RequestParam(required = false) Long roleId,
	                               @RequestParam(required = false) String status) {
	        List<User> userList = userService.searchAndFilter(keyword, roleId, status);
	        List<Role> roleList = userService.findAllRoles();

	        model.addAttribute("userList", userList);
	        model.addAttribute("roleList", roleList);
	        model.addAttribute("keyword", keyword);
	        model.addAttribute("roleId", roleId);
	        model.addAttribute("status", status);

	        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	        model.addAttribute("currentPage", "users");
	        return "admin/users";
	    }

	    @GetMapping("/shipper-requests")
	    public String shipperRequestsPage(Model model) {
	        model.addAttribute("currentPage", "shipper-requests");
	        model.addAttribute("pageTitle", "Y√™u c·∫ßu Shipper");
	        return "admin/admin-shipper-requests";
	    }

	    @GetMapping("/branch-requests")
	    public String branchRequestsPage(Model model) {
	        model.addAttribute("currentPage", "branch-requests");
	        model.addAttribute("pageTitle", "Y√™u c·∫ßu Chi nh√°nh");
	        return "admin/admin-branch-requests";
	    }
	    @GetMapping("/users/add")
	    public String showAddUserForm(Model model) {
	        model.addAttribute("user", new User());
	        model.addAttribute("roleList", userService.findAllRoles());

	        model.addAttribute("pageTitle", "Th√™m M·ªõi");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	        model.addAttribute("parentPageUrl", "/admin/users");

	        model.addAttribute("currentPage", "users");
	        return "admin/user-form";
	    }
/*
	    @GetMapping("/users/edit/{id}")
	    public String showEditUserForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        User user = userService.findById(id);
	        if (user == null) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
	            return "redirect:/admin/users";
	        }
	        model.addAttribute("user", user);
	        model.addAttribute("roleList", userService.findAllRoles());

	        model.addAttribute("pageTitle", "Ch·ªânh S·ª≠a");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	        model.addAttribute("parentPageUrl", "/admin/users");

	        model.addAttribute("currentPage", "users");
	        return "admin/user-form";
	    }
*/
	    @GetMapping("/users/edit/{id}")
	    public String showEditUserForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        User user = userService.findById(id);
	        if (user == null) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
	            return "redirect:/admin/users";
	        }

	        model.addAttribute("roleList", userService.findAllRoles());
	        model.addAttribute("user", user);

	        Address defaultAddress = user.getAddresses()
	        		.stream()
	                .filter(Address::isDefault)
	                .findFirst()
	                .orElse(null);

	        model.addAttribute("defaultAddress", defaultAddress);

	        model.addAttribute("pageTitle", "Ch·ªânh S·ª≠a");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	        model.addAttribute("parentPageUrl", "/admin/users");
	        model.addAttribute("currentPage", "users");

	        return "admin/user-form";
	    }


	 // V·ªã tr√≠: trong file com.alotra.controller.AdminController.java

	    @PostMapping("/users/save")
	    public String saveUser(
	            @Valid @ModelAttribute("user") User user,
	            BindingResult bindingResult,
	            @RequestParam("avatarFile") MultipartFile avatarFile,
	            @RequestParam(required = false) String addressLine1,
	            @RequestParam(required = false) String addressCity,
	            @RequestParam(required = false) String addressWard,
	            Model model,
	            RedirectAttributes redirectAttributes) {

	        System.out.println("üü¢ [DEBUG] B·∫ÆT ƒê·∫¶U L∆ØU NG∆Ø·ªúI D√ôNG");
	        System.out.println("üëâ ID: " + user.getId());
	        System.out.println("üëâ H·ªç t√™n: " + user.getFullName());
	        System.out.println("üëâ Email: " + user.getEmail());
	        System.out.println("üëâ SƒêT: " + user.getPhone());
	        System.out.println("üëâ CCCD: " + user.getIdCardNumber());
	        System.out.println("üëâ Gi·ªõi t√≠nh: " + user.getGender());
	        System.out.println("üëâ Vai tr√≤ ID: " + (user.getRole() != null ? user.getRole().getId() : "null"));
	        System.out.println("üëâ Tr·∫°ng th√°i: " + user.getStatus());
	        System.out.println("üëâ Raw Password: " + user.getRawPassword());
	        System.out.println("üëâ ƒê·ªãa ch·ªâ nh·∫≠p: " + addressLine1 + " - " + addressWard + " - " + addressCity);

	        // Y√™u c·∫ßu m·∫≠t kh·∫©u khi t·∫°o m·ªõi
	        if (user.getId() == null && !StringUtils.hasText(user.getRawPassword())) {
	            bindingResult.rejectValue("rawPassword", "error.user", "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc khi t·∫°o m·ªõi");
	        }
	        if (user.getId() != null && !StringUtils.hasText(user.getRawPassword())) {
	            System.out.println("üßπ [DEBUG] B·ªè qua l·ªói m·∫≠t kh·∫©u khi ch·ªânh s·ª≠a ng∆∞·ªùi d√πng");

	            // L·ªçc t·∫•t c·∫£ l·ªói tr·ª´ l·ªói li√™n quan ƒë·∫øn rawPassword
	            List<FieldError> filteredErrors = bindingResult.getFieldErrors().stream()
	                    .filter(err -> !err.getField().equals("rawPassword"))
	                    .toList();

	            // T·∫°o BindingResult m·ªõi
	            BindingResult newResult = new BeanPropertyBindingResult(user, "user");
	            for (FieldError e : filteredErrors) {
	                newResult.addError(e);
	            }

	            model.addAttribute(BindingResult.MODEL_KEY_PREFIX + "user", newResult);
	            bindingResult = newResult;
	        }

	        // üß≠ N·∫øu c√≤n l·ªói sau x·ª≠ l√Ω => tr·∫£ v·ªÅ form
	        // N·∫øu c√≥ l·ªói validation ban ƒë·∫ßu, tr·∫£ v·ªÅ ngay
	        if (bindingResult.hasErrors()) {
	        	 System.out.println("‚ùå [DEBUG] C√≥ l·ªói BindingResult:");
		            bindingResult.getAllErrors().forEach(err -> System.out.println("   ‚ö†Ô∏è " + err));
	            model.addAttribute("roleList", userService.findAllRoles());
	            model.addAttribute("pageTitle", user.getId() == null ? "Th√™m M·ªõi" : "Ch·ªânh S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	            model.addAttribute("parentPageUrl", "/admin/users");
	            model.addAttribute("error", "Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng b·ªã l·ªói.");
	            return "admin/user-form";
	        }

	        try {
	            userService.save(user, avatarFile, addressLine1, addressCity, addressWard);
	            redirectAttributes.addFlashAttribute("message", "L∆∞u ng∆∞·ªùi d√πng th√†nh c√¥ng!");

	        } catch (DataIntegrityViolationException e) {
	            // --- PH·∫¶N X·ª¨ L√ù L·ªñI TR√ôNG L·∫∂P ---
	        	System.out.println("‚ùå [DEBUG] DataIntegrityViolationException: " + e.getMessage());
	            e.printStackTrace();
	            String errorMessage = e.getMostSpecificCause().getMessage();

	            // Ki·ªÉm tra xem l·ªói l√† do email, phone hay cccd
	            if (errorMessage.toLowerCase().contains("email")) {
	                bindingResult.rejectValue("email", "error.user", "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
	            } else if (errorMessage.toLowerCase().contains("phone")) {
	                bindingResult.rejectValue("phone", "error.user", "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
	            } else if (errorMessage.toLowerCase().contains("idcardnumber")) {
	                 bindingResult.rejectValue("idCardNumber", "error.user", "S·ªë CCCD n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.");
	            } else {
	                // L·ªói tr√πng l·∫∑p chung
	                model.addAttribute("error", "L·ªói: D·ªØ li·ªáu b·ªã tr√πng l·∫∑p, vui l√≤ng ki·ªÉm tra l·∫°i.");
	            }

	            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã l·∫°i form v·ªõi l·ªói ƒë·ªè
	            model.addAttribute("roleList", userService.findAllRoles());
	            model.addAttribute("pageTitle", user.getId() == null ? "Th√™m M·ªõi" : "Ch·ªânh S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	            model.addAttribute("parentPageUrl", "/admin/users");
	            return "admin/user-form";
	        } catch (Exception e) {
	            System.out.println("‚ùå [DEBUG] L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u user: " + e.getMessage());
	            e.printStackTrace();
	            redirectAttributes.addFlashAttribute("error", "‚ùå L·ªói khi l∆∞u ng∆∞·ªùi d√πng: " + e.getMessage());
	        }

	        return "redirect:/admin/users";
	    }
	    @GetMapping("/users/delete/{id}")
	    public String deleteUser(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
	        try {
	            userService.deleteById(id);
	            redirectAttributes.addFlashAttribute("message", "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
	        } catch (Exception e) {
	            redirectAttributes.addFlashAttribute("error", "L·ªói: Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng n√†y.");
	        }
	        return "redirect:/admin/users";
	    }
	 // HI·ªÇN TH·ªä TRANG CHI TI·∫æT NG∆Ø·ªúI D√ôNG (ƒê√£ c·∫≠p nh·∫≠t)
	    @GetMapping("/users/details/{id}")
	    public String showUserDetails(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        User user = userService.findById(id);
	        if (user == null) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
	            return "redirect:/admin/users";
	        }

	        // --- BREADCRUMB (S·ª≠ d·ª•ng pageTitle) ---
	        model.addAttribute("pageTitle", "Chi ti·∫øt");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng");
	        model.addAttribute("parentPageUrl", "/admin/users");
	        // ------------------------------------

	        model.addAttribute("user", user);
	        model.addAttribute("currentPage", "users");
	        return "admin/user-details"; // Tr·ªè ƒë·∫øn view m·ªõi
	    }
	    // --- QU·∫¢N L√ù CHI NH√ÅNH ---

	    @GetMapping("/branches")
	    public String showBranchPage(Model model,
	                                 @RequestParam(required = false) String keyword,
	                                 @RequestParam(required = false) String status) {
	        List<Branch> branchList = branchService.searchByKeywordAndStatus(keyword, status);
	        model.addAttribute("branchList", branchList);
	        model.addAttribute("keyword", keyword);
	        model.addAttribute("status", status);

	        model.addAttribute("pageTitle", "Qu·∫£n l√Ω C·ª≠a h√†ng");
	        model.addAttribute("currentPage", "branches");
	        return "admin/branches";
	    }

	    @GetMapping("/branches/add")
	    public String showAddBranchForm(Model model) {
	        model.addAttribute("branch", new Branch());
	        model.addAttribute("users", userRepository.findAll());

	        model.addAttribute("pageTitle", "Th√™m M·ªõi");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω C·ª≠a h√†ng");
	        model.addAttribute("parentPageUrl", "/admin/branches");

	        model.addAttribute("currentPage", "branches");
	        return "admin/branch-form";
	    }

	    @GetMapping("/branches/edit/{id}")
	    public String showEditBranchForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        Branch branch = branchService.findById(id);
	        if (branch == null) {
	            redirectAttributes.addFlashAttribute("error", "L·ªói: Kh√¥ng t√¨m th·∫•y chi nh√°nh c√≥ ID = " + id);
	            return "redirect:/admin/branches";
	        }
	        model.addAttribute("branch", branch);
	        model.addAttribute("users", userRepository.findAll());

	        model.addAttribute("pageTitle", "Ch·ªânh S·ª≠a");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω C·ª≠a h√†ng");
	        model.addAttribute("parentPageUrl", "/admin/branches");

	        model.addAttribute("currentPage", "branches");
	        return "admin/branch-form";
	    }

	    @PostMapping("/branches/save")
	    public String saveBranch(@Valid @ModelAttribute("branch") Branch branch,
	                             BindingResult bindingResult,
	                             RedirectAttributes redirectAttributes,
	                             Model model) {
	        if (bindingResult.hasErrors()) {
	            model.addAttribute("users", userRepository.findAll());
	            model.addAttribute("pageTitle", branch.getId() == null ? "Th√™m M·ªõi" : "Ch·ªânh S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω C·ª≠a h√†ng");
	            model.addAttribute("parentPageUrl", "/admin/branches");
	            return "admin/branch-form";
	        }

	        try {
	            branchService.save(branch);
	            redirectAttributes.addFlashAttribute("message", "L∆∞u chi nh√°nh th√†nh c√¥ng!");
	        } catch (DataIntegrityViolationException e) {
	            // B·∫Øt l·ªói tr√πng slug v√† b√°o l·ªói ngay t·∫°i tr∆∞·ªùng T√™n
	            bindingResult.rejectValue("name", "error.branch", "T√™n chi nh√°nh n√†y ƒë√£ t·ªìn t·∫°i (t·∫°o ra slug b·ªã tr√πng).");
	            model.addAttribute("users", userRepository.findAll());
	            model.addAttribute("pageTitle", branch.getId() == null ? "Th√™m M·ªõi" : "Ch·ªânh S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω C·ª≠a h√†ng");
	            model.addAttribute("parentPageUrl", "/admin/branches");
	            return "admin/branch-form";
	        }

	        return "redirect:/admin/branches";
	    }

	    @GetMapping("/branches/delete/{id}")
	    public String deleteBranch(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
	         try {
	            branchService.deleteById(id);
	            redirectAttributes.addFlashAttribute("message", "X√≥a chi nh√°nh th√†nh c√¥ng!");
	        } catch (DataIntegrityViolationException e) {
	            redirectAttributes.addFlashAttribute("error", "L·ªói: Kh√¥ng th·ªÉ x√≥a chi nh√°nh n√†y v√¨ ƒë√£ c√≥ d·ªØ li·ªáu li√™n quan.");
	        } catch (Exception e) {
	            redirectAttributes.addFlashAttribute("error", "L·ªói: Kh√¥ng t√¨m th·∫•y chi nh√°nh ƒë·ªÉ x√≥a.");
	        }
	        return "redirect:/admin/branches";
	    }
	 // Ti√™m CategoryService


	    // --- QU·∫¢N L√ù DANH M·ª§C ---

	    @GetMapping("/categories")
	    public String showCategoryPage(Model model) {
	        model.addAttribute("categoryList", categoryService.findAll());
	        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Danh m·ª•c");
	        model.addAttribute("currentPage", "categories");
	        return "admin/categories";
	    }

	    @GetMapping("/categories/add")
	    public String showAddCategoryForm(Model model) {
	        model.addAttribute("category", new Category());
	        model.addAttribute("categoryList", categoryService.findAll()); // ƒê·ªÉ ch·ªçn danh m·ª•c cha
	        model.addAttribute("pageTitle", "Th√™m Danh m·ª•c m·ªõi");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Danh m·ª•c");
	        model.addAttribute("parentPageUrl", "/admin/categories");
	        model.addAttribute("currentPage", "categories");
	        return "admin/category-form";
	    }

	    @GetMapping("/categories/edit/{id}")
	    public String showEditCategoryForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        Category category = categoryService.findById(id);
	        if (category == null) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y danh m·ª•c!");
	            return "redirect:/admin/categories";
	        }
	        model.addAttribute("category", category);
	        model.addAttribute("categoryList", categoryService.findAll());
	        model.addAttribute("pageTitle", "S·ª≠a Danh m·ª•c");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Danh m·ª•c");
	        model.addAttribute("parentPageUrl", "/admin/categories");
	        model.addAttribute("currentPage", "categories");
	        return "admin/category-form";
	    }

	    @PostMapping("/categories/save")
	    public String saveCategory(@Valid @ModelAttribute("category") Category category, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes) {
	        if (bindingResult.hasErrors()) {
	            model.addAttribute("categoryList", categoryService.findAll());
	            return "admin/category-form";
	        }
	        try {
	            categoryService.save(category);
	            redirectAttributes.addFlashAttribute("message", "L∆∞u danh m·ª•c th√†nh c√¥ng!");
	        } catch (DataIntegrityViolationException e) {
	            redirectAttributes.addFlashAttribute("error", "L·ªói: Slug ƒë√£ t·ªìn t·∫°i!");
	        }
	        return "redirect:/admin/categories";
	    }

	    @GetMapping("/categories/delete/{id}")
	    public String deleteCategory(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
	        try {
	            categoryService.deleteById(id);
	            redirectAttributes.addFlashAttribute("message", "X√≥a danh m·ª•c th√†nh c√¥ng!");
	        } catch (Exception e) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ x√≥a danh m·ª•c n√†y (c√≥ th·ªÉ do ƒëang ch·ª©a s·∫£n ph·∫©m ho·∫∑c danh m·ª•c con).");
	        }
	        return "redirect:/admin/categories";
	    }



	    // --- QU·∫¢N L√ù TOPPING ---

	    @GetMapping("/toppings")
	    public String showToppingPage(Model model) {
	        model.addAttribute("toppingList", toppingService.findAll());
	        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Topping");
	        model.addAttribute("currentPage", "toppings");
	        return "admin/toppings";
	    }

	    @GetMapping("/toppings/add")
	    public String showAddToppingForm(Model model) {
	        model.addAttribute("topping", new Topping());
	        model.addAttribute("pageTitle", "Th√™m Topping m·ªõi");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Topping");
	        model.addAttribute("parentPageUrl", "/admin/toppings");
	        model.addAttribute("currentPage", "toppings");
	        return "admin/topping-form";
	    }

	    @GetMapping("/toppings/edit/{id}")
	    public String showEditToppingForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
	        Topping topping = toppingService.findById(id);
	        if (topping == null) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y topping!");
	            return "redirect:/admin/toppings";
	        }
	        model.addAttribute("topping", topping);
	        model.addAttribute("pageTitle", "S·ª≠a Topping");
	        model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Topping");
	        model.addAttribute("parentPageUrl", "/admin/toppings");
	        model.addAttribute("currentPage", "toppings");
	        return "admin/topping-form";
	    }

	    @PostMapping("/toppings/save")
	    public String saveTopping(@Valid @ModelAttribute("topping") Topping topping,
	                              BindingResult bindingResult,
	                              RedirectAttributes redirectAttributes,
	                              Model model) { // Th√™m Model v√†o tham s·ªë
	        if (bindingResult.hasErrors()) {
	            // Th√™m c√°c model attribute c·∫ßn thi·∫øt n·∫øu c√≥ l·ªói validation
	            model.addAttribute("pageTitle", topping.getId() == null ? "Th√™m M·ªõi" : "S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Topping");
	            model.addAttribute("parentPageUrl", "/admin/toppings");
	            return "admin/topping-form";
	        }

	        try {
	            toppingService.save(topping);
	            redirectAttributes.addFlashAttribute("message", "L∆∞u topping th√†nh c√¥ng!");
	        } catch (DataIntegrityViolationException e) {
	            // B·∫Øt l·ªói tr√πng l·∫∑p v√† g√°n l·ªói v√†o tr∆∞·ªùng 'name'
	            bindingResult.rejectValue("name", "error.topping", "T√™n topping n√†y ƒë√£ t·ªìn t·∫°i.");

	            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã l·∫°i form
	            model.addAttribute("pageTitle", topping.getId() == null ? "Th√™m M·ªõi" : "S·ª≠a");
	            model.addAttribute("parentPageTitle", "Qu·∫£n l√Ω Topping");
	            model.addAttribute("parentPageUrl", "/admin/toppings");
	            return "admin/topping-form";
	        }

	        return "redirect:/admin/toppings";
	    }

	    @GetMapping("/toppings/delete/{id}")
	    public String deleteTopping(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
	        try {
	            toppingService.deleteById(id);
	            redirectAttributes.addFlashAttribute("message", "X√≥a topping th√†nh c√¥ng!");
	        } catch (Exception e) {
	            redirectAttributes.addFlashAttribute("error", "Kh√¥ng th·ªÉ x√≥a topping n√†y.");
	        }
	        return "redirect:/admin/toppings";
	    }

	 // --- QU·∫¢N L√ù K√çCH TH∆Ø·ªöC (SIZE) ---

	    @GetMapping("/sizes")
	    public String showSizes(Model model) {
	        List<Size> sizeList = sizeService.findAll();
	        model.addAttribute("sizeList", sizeList);
	        model.addAttribute("pageTitle", "Qu·∫£n l√Ω K√≠ch th∆∞·ªõc");
	        model.addAttribute("currentPage", "sizes");

	        return "admin/sizes"; // ‚úÖ Thymeleaf t·ª± load layout qua th:replace
	    }


	    @GetMapping("/products")
    public String showProductPage(Model model) {
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω S·∫£n ph·∫©m");
        model.addAttribute("currentPage", "products");
        return "admin/products"; // Tr·ªè ƒë·∫øn file products.html
    }

    @GetMapping("/orders")
    public String showOrderPage(Model model) {
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω ƒê∆°n h√†ng");
        model.addAttribute("currentPage", "orders");
        return "admin/orders"; // Tr·ªè ƒë·∫øn file orders.html
    }

    @GetMapping("/marketing")
    public String showMarketingPage(Model model) {
        model.addAttribute("pageTitle", "Marketing & Khuy·∫øn m√£i");
        model.addAttribute("currentPage", "marketing");
        return "admin/marketing"; // Tr·ªè ƒë·∫øn file marketing.html
    }

    @GetMapping("/reports")
    public String showReportPage(Model model) {
        model.addAttribute("pageTitle", "B√°o c√°o & Th·ªëng k√™");
        model.addAttribute("currentPage", "reports");
        return "admin/reports"; // Tr·ªè ƒë·∫øn file reports.html
    }

    @GetMapping("/shipping")
    public String showShippingPage(Model model) {
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω V·∫≠n chuy·ªÉn");
        model.addAttribute("currentPage", "shipping");
        return "admin/shipping"; // Tr·ªè ƒë·∫øn file shipping.html
    }

 // --- QU·∫¢N L√ù NH√Ä V·∫¨N CHUY·ªÇN ---
    @GetMapping("/shipping-carriers")
    public String showShippingCarriersPage(Model model) {
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Nh√† v·∫≠n chuy·ªÉn");
        model.addAttribute("currentPage", "shipping-carriers");
        return "admin/shipping_carriers"; // Tr·ªè t·ªõi file shipping_carriers.html
    }


    @GetMapping("/settings")
    public String showSettingPage(Model model) {
        model.addAttribute("pageTitle", "C√†i ƒë·∫∑t");
        model.addAttribute("currentPage", "settings");
        return "admin/settings"; // Tr·ªè ƒë·∫øn file settings.html
    }

    // ======================= üì¢ KHUY·∫æN M√ÉI (PROMOTIONS) =======================

    @GetMapping("/promotions/campaign-list")
    public String showCampaignList(Model model) {
        model.addAttribute("pageTitle", "Chi·∫øn d·ªãch khuy·∫øn m√£i");
        model.addAttribute("currentPage", "campaigns");
        return "admin/promotions/campaign-list";
    }

    @GetMapping("/promotions/coupon-list")
    public String showCouponList(Model model) {
        model.addAttribute("pageTitle", "M√£ gi·∫£m gi√°");
        model.addAttribute("currentPage", "coupons");
        return "admin/promotions/coupon-list";
    }

    @GetMapping("/promotions/campaign-target")
    public String showCampaignTarget(Model model) {
        model.addAttribute("pageTitle", "ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng");
        model.addAttribute("currentPage", "targets");
        return "admin/promotions/campaign-target";
    }

    @GetMapping("/chat")
    public String showChatDashboard(Model model) {
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω Chat");
        model.addAttribute("currentPage", "chat");
        return "admin/admin-chat-dashboard";
    }

}