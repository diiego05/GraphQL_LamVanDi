package com.alotra.repository;

import com.alotra.entity.PromotionalCampaign;
import org.springframework.data.jpa.repository.*;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Pageable;  //

import java.time.LocalDateTime;
import java.util.List;
/*
public interface PromotionalCampaignRepository extends JpaRepository<PromotionalCampaign, Long> {

    // üü¢ L·∫•y danh s√°ch chi·∫øn d·ªãch ƒëang ho·∫°t ƒë·ªông
    @Query("SELECT c FROM PromotionalCampaign c " +
           "WHERE c.status = 'ACTIVE' AND c.startAt <= :now AND c.endAt >= :now")
    List<PromotionalCampaign> findActiveCampaigns(@Param("now") LocalDateTime now);

    // üü° L·∫•y danh s√°ch chi·∫øn d·ªãch ƒë√£ h·∫øt h·∫°n
    @Query("SELECT c FROM PromotionalCampaign c " +
           "WHERE c.endAt < :now")
    List<PromotionalCampaign> findExpiredCampaigns(@Param("now") LocalDateTime now);

    // üü† L·∫•y danh s√°ch chi·∫øn d·ªãch s·∫Øp di·ªÖn ra
    @Query("SELECT c FROM PromotionalCampaign c " +
           "WHERE c.startAt > :now")
    List<PromotionalCampaign> findUpcomingCampaigns(@Param("now") LocalDateTime now);

    // üî∏ TƒÉng l∆∞·ª£t xem khi ng∆∞·ªùi d√πng truy c·∫≠p trang chi ti·∫øt
    @Modifying
    @Transactional
    @Query("UPDATE PromotionalCampaign c SET c.viewCount = c.viewCount + 1 WHERE c.id = :id")
    void incrementViewCount(@Param("id") Long id);

    // üîπ L·∫•y danh s√°ch chi·∫øn d·ªãch theo view cao nh·∫•t (top n)
    @Query("SELECT c FROM PromotionalCampaign c ORDER BY c.viewCount DESC")
    List<PromotionalCampaign> findTopByViewCount(Pageable pageable);
}*/


public interface PromotionalCampaignRepository extends JpaRepository<PromotionalCampaign, Long> {

    // üü¢ L·∫•y danh s√°ch chi·∫øn d·ªãch ƒëang ho·∫°t ƒë·ªông
    @Query("""
        SELECT c FROM PromotionalCampaign c
        WHERE c.status = 'ACTIVE'
        AND c.startAt <= :now
        AND c.endAt >= :now
    """)
    List<PromotionalCampaign> findActiveCampaigns(@Param("now") LocalDateTime now);

    // üü° L·∫•y danh s√°ch chi·∫øn d·ªãch ƒë√£ h·∫øt h·∫°n
    @Query("""
        SELECT c FROM PromotionalCampaign c
        WHERE c.endAt < :now
    """)
    List<PromotionalCampaign> findExpiredCampaigns(@Param("now") LocalDateTime now);

    // üü† L·∫•y danh s√°ch chi·∫øn d·ªãch s·∫Øp di·ªÖn ra
    @Query("""
        SELECT c FROM PromotionalCampaign c
        WHERE c.startAt > :now
    """)
    List<PromotionalCampaign> findUpcomingCampaigns(@Param("now") LocalDateTime now);

    // üî∏ TƒÉng l∆∞·ª£t xem khi ng∆∞·ªùi d√πng truy c·∫≠p trang chi ti·∫øt
    @Modifying
    @Transactional
    @Query("UPDATE PromotionalCampaign c SET c.viewCount = c.viewCount + 1 WHERE c.id = :id")
    void incrementViewCount(@Param("id") Long id);

    // üîπ L·∫•y danh s√°ch chi·∫øn d·ªãch theo view cao nh·∫•t (Top N)
    @Query("""
        SELECT c FROM PromotionalCampaign c
        ORDER BY c.viewCount DESC
    """)
    List<PromotionalCampaign> findTopByViewCount(Pageable pageable);

    // üßÆ ƒê·∫øm s·ªë chi·∫øn d·ªãch theo tr·∫°ng th√°i
    long countByStatus(PromotionalCampaign.CampaignStatus status);

    // üìä L·∫•y chi·∫øn d·ªãch theo tr·∫°ng th√°i c·ª• th·ªÉ
    List<PromotionalCampaign> findByStatus(String status);

    // üìÖ L·∫•y chi·∫øn d·ªãch trong kho·∫£ng th·ªùi gian (ph·ª•c v·ª• th·ªëng k√™ theo th·ªùi gian)
    @Query("""
        SELECT c FROM PromotionalCampaign c
        WHERE c.startAt BETWEEN :from AND :to
           OR c.endAt BETWEEN :from AND :to
    """)
    List<PromotionalCampaign> findCampaignsInPeriod(@Param("from") LocalDateTime from,
                                                    @Param("to") LocalDateTime to);
}

