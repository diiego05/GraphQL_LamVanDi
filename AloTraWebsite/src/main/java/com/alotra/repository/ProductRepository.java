package com.alotra.repository;

import com.alotra.entity.Product;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

    // Th√™m ph∆∞∆°ng th·ª©c n√†y:
    @Query("SELECT p FROM Product p " +
           "LEFT JOIN FETCH p.media " +
           "LEFT JOIN FETCH p.variants v " +
           "LEFT JOIN FETCH v.size")
    List<Product> findAllWithDetails();

    // Ph∆∞∆°ng th·ª©c cho ch·ª©c nƒÉng t√¨m ki·∫øm ·ªü trang admin
    List<Product> findByNameContainingIgnoreCase(String name);

    @Query("SELECT v.product FROM ProductVariant v WHERE v.id = :variantId")
    Optional<Product> findProductByVariantId(Long variantId);


    // T√åM S·∫¢N PH·∫®M C√ì TR·∫†NG TH√ÅI "ACTIVE"
    List<Product> findAllByStatus(String status);

    // T√åM S·∫¢N PH·∫®M THEO TR·∫†NG TH√ÅI V√Ä SLUG C·ª¶A DANH M·ª§C
    List<Product> findAllByStatusAndCategory_Slug(String status, String categorySlug);

    Page<Product> findAllByStatus(String status, Pageable pageable);

    // S·ª¨A L·∫†I: Tr·∫£ v·ªÅ Page<Product> v√† nh·∫≠n Pageable
    Page<Product> findAllByStatusAndCategory_Slug(String status, String categorySlug, Pageable pageable);

    List<Product> findByCategory_Id(Long categoryId);

    // üü¢ (Tu·ª≥ ch·ªçn) T√¨m theo t√™n ho·∫∑c t·ª´ kho√° n·∫øu c·∫ßn

}
