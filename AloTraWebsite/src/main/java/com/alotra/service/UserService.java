package com.alotra.service;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import com.alotra.entity.Address; // << Th√™m import
import com.alotra.entity.Role;
import com.alotra.entity.Shipper;
import com.alotra.entity.User;
import com.alotra.repository.AddressRepository; // << Th√™m import
import com.alotra.repository.RoleRepository;
import com.alotra.repository.ShipperRepository;
import com.alotra.repository.UserRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // << Th√™m import
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private AddressRepository addressRepository; // << Ti√™m AddressRepository
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private CloudinaryService cloudinaryService;
    @Autowired
    private ShipperRepository shipperRepository;

    public List<User> searchAndFilter(String keyword, Long roleId, String status) {
        return userRepository.searchAndFilter(keyword, roleId,
                StringUtils.hasText(status) ? status : null);
    }

    public List<Role> findAllRoles() {
        return roleRepository.findAll();
    }

    public User findById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    @Transactional // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c thao t√°c DB th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i c√πng nhau
    public void save(User userFromForm, MultipartFile avatarFile,
                     String addressLine1, String addressCity, String addressWard) {
    	Logger log = LoggerFactory.getLogger(getClass());
        log.info("üü¢ [SERVICE] B·∫Øt ƒë·∫ßu l∆∞u ng∆∞·ªùi d√πng...");
        log.info("üëâ ID: {}", userFromForm.getId());
        log.info("üëâ FullName: {}", userFromForm.getFullName());
        log.info("üëâ Email: {}", userFromForm.getEmail());
        log.info("üëâ Phone: {}", userFromForm.getPhone());
        log.info("üëâ Role ID: {}", userFromForm.getRole() != null ? userFromForm.getRole().getId() : null);
        log.info("üëâ Raw Password: {}", userFromForm.getRawPassword());
        log.info("üëâ Address nh·∫≠p: {} - {} - {}", addressLine1, addressWard, addressCity);
        User userInDb;
        // Ki·ªÉm tra l√† S·ª≠a hay Th√™m m·ªõi
        if (userFromForm.getId() != null) {
        	userInDb = userRepository.findById(userFromForm.getId())
                    .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t"));
            log.info("‚úèÔ∏è [SERVICE] C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng hi·ªán c√≥ ID = {}", userInDb.getId());
        } else {
        	userInDb = new User();
            log.info("‚ûï [SERVICE] T·∫°o m·ªõi ng∆∞·ªùi d√πng");
        }

        // 1. X·ª≠ l√Ω m·∫≠t kh·∫©u
        if (StringUtils.hasText(userFromForm.getRawPassword())) {
        	 String encoded = passwordEncoder.encode(userFromForm.getRawPassword());
             userInDb.setPasswordHash(encoded);
             log.info("‚úÖ M·∫≠t kh·∫©u ƒë√£ encode");
         } else {
             log.info("‚ö†Ô∏è Kh√¥ng nh·∫≠p m·∫≠t kh·∫©u (gi·ªØ nguy√™n n·∫øu s·ª≠a)");
        }

        // 2. X·ª≠ l√Ω ·∫£nh ƒë·∫°i di·ªán
        if (avatarFile != null && !avatarFile.isEmpty()) {
            String avatarUrl = cloudinaryService.uploadFile(avatarFile);
            userInDb.setAvatarUrl(avatarUrl);
            log.info("‚úÖ ·∫¢nh ƒë·∫°i di·ªán ƒë√£ upload: {}", avatarUrl);
        }

        // 3. C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin kh√°c
        userInDb.setFullName(userFromForm.getFullName());
        userInDb.setEmail(userFromForm.getEmail());
        userInDb.setPhone(userFromForm.getPhone());
        userInDb.setGender(userFromForm.getGender());
        userInDb.setDateOfBirth(userFromForm.getDateOfBirth());
        userInDb.setIdCardNumber(userFromForm.getIdCardNumber());

        userInDb.setStatus(userFromForm.getStatus());
        if (userFromForm.getRole() != null && userFromForm.getRole().getId() != null) {
            Role role = roleRepository.findById(userFromForm.getRole().getId())
                    .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y Role ID: " + userFromForm.getRole().getId()));
            userInDb.setRole(role);
            log.info("‚úÖ Role ƒë√£ g√°n: {} - {}", role.getId(), role.getCode());
        } else {
            log.warn("‚ö†Ô∏è Role kh√¥ng h·ª£p l·ªá (null ho·∫∑c kh√¥ng c√≥ ID)");
        }
        // 4. L∆∞u User ƒë·ªÉ c√≥ ID (quan tr·ªçng cho vi·ªác t·∫°o ƒë·ªãa ch·ªâ m·ªõi)
        User savedUser = userRepository.save(userInDb);
        log.info("üíæ [SERVICE] User ƒë√£ l∆∞u th√†nh c√¥ng ‚Äî ID = {}", savedUser.getId());

        // 5. X·ª≠ l√Ω ƒë·ªãa ch·ªâ n·∫øu l√† USER
        if (savedUser.getRole() != null
                && "USER".equalsIgnoreCase(savedUser.getRole().getCode())
                && StringUtils.hasText(addressLine1)) {
            log.info("üè† [SERVICE] Th√™m ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh cho USER ID = {}", savedUser.getId());

            Address newAddress = new Address();
            newAddress.setUser(savedUser);
            newAddress.setRecipient(savedUser.getFullName());
            newAddress.setPhone(savedUser.getPhone());
            newAddress.setLine1(addressLine1);
            newAddress.setCity(addressCity);
            newAddress.setWard(addressWard);
            newAddress.setDefault(true); // T·∫°m th·ªùi g√°n ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n l√† m·∫∑c ƒë·ªãnh

            addressRepository.save(newAddress);
            log.info("‚úÖ ƒê√£ l∆∞u ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh cho user ID = {}", savedUser.getId());
        } else {
            log.info("‚ö†Ô∏è Kh√¥ng th√™m ƒë·ªãa ch·ªâ (kh√¥ng ph·∫£i USER ho·∫∑c kh√¥ng nh·∫≠p ƒë·ªãa ch·ªâ)");
        }
        log.info("üéØ [SERVICE] Ho√†n t·∫•t x·ª≠ l√Ω l∆∞u ng∆∞·ªùi d√πng.");
    }

    public void deleteById(Long id) {
        userRepository.deleteById(id);
    }

    public User getCurrentUserOrThrow() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || !(auth.getPrincipal() instanceof User user)) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
        }
        return user;
    }
    public Long getCurrentUserId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated()) {
            throw new RuntimeException("User ch∆∞a ƒëƒÉng nh·∫≠p");
        }

        // N·∫øu username l√† email ‚Üí l·∫•y t·ª´ DB ra ID
        String email = authentication.getName();
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi email: " + email));
        return user.getId();
    }
    public Long getCurrentShipperId() {
        Long userId = getCurrentUserId();
        Shipper shipper = shipperRepository.findByUser_Id(userId)
                .orElseThrow(() -> new RuntimeException("T√†i kho·∫£n n√†y kh√¥ng ph·∫£i shipper"));
        return shipper.getId();
    }

}