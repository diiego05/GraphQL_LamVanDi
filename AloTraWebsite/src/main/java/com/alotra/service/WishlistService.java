/*package com.alotra.service;

import com.alotra.dto.WishlistResponse;
import com.alotra.entity.*;
import com.alotra.repository.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;

@Service
@Transactional
@RequiredArgsConstructor
public class WishlistService {

    private final WishlistRepository wishlistRepo;
    private final ProductRepository productRepo;
    private final UserService userService; // L·∫•y user hi·ªán t·∫°i t·ª´ JWT

    @PersistenceContext
    private EntityManager em;

    // üîπ L·∫•y to√†n b·ªô danh s√°ch y√™u th√≠ch c·ªßa user hi·ªán t·∫°i
    public List<WishlistResponse> getAllForCurrentUser() {
        User currentUser = userService.getCurrentUserOrThrow();
        List<Wishlist> list = wishlistRepo.findByUserId(currentUser.getId());

        return list.stream().map(w -> {
            Product p = w.getProduct();
            if (p == null) return null;

            // üñºÔ∏è L·∫•y thumbnail (∆∞u ti√™n ·∫£nh ch√≠nh n·∫øu c√≥)
            String thumbnail = p.getMedia() != null && !p.getMedia().isEmpty()
                    ? p.getMedia().stream()
                    		.filter(ProductMedia::isPrimary)

                        .findFirst()
                        .orElse(p.getMedia().iterator().next())
                        .getUrl()
                    : null;

            // üí∞ L·∫•y gi√° ƒë·∫ßu ti√™n (size ƒë·∫ßu ti√™n)
            BigDecimal price = p.getVariants() != null && !p.getVariants().isEmpty()
                    ? p.getVariants().iterator().next().getPrice()
                    : null;

            return new WishlistResponse(
                    p.getId(),
                    p.getName(),
                    price,
                    thumbnail
            );
        }).filter(r -> r != null).toList();
    }

    // ‚ûï Th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch
    public void addToWishlist(Long productId) {
        User currentUser = userService.getCurrentUserOrThrow();

        if (!productRepo.existsById(productId))
            throw new IllegalArgumentException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");

        if (wishlistRepo.existsByUserIdAndProductId(currentUser.getId(), productId))
            return; // tr√°nh th√™m tr√πng

        wishlistRepo.save(new Wishlist(currentUser.getId(), productId));
        em.flush();
    }

    // ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch
    public void removeFromWishlist(Long productId) {
        User currentUser = userService.getCurrentUserOrThrow();
        wishlistRepo.deleteByUserIdAndProductId(currentUser.getId(), productId);
        em.flush();
    }
}*/
package com.alotra.service;

import com.alotra.dto.ProductVariantDTO;
import com.alotra.dto.WishlistResponse;
import com.alotra.entity.*;
import com.alotra.repository.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.Comparator;
import java.util.List;

@Service
@Transactional
@RequiredArgsConstructor
public class WishlistService {

    private final WishlistRepository wishlistRepo;
    private final ProductRepository productRepo;
    private final UserService userService;
    private final ProductVariantService productVariantService;  // ‚úÖ th√™m service n√†y ƒë·ªÉ l·∫•y gi√° khuy·∫øn m√£i

    @PersistenceContext
    private EntityManager em;

    // üîπ L·∫•y to√†n b·ªô danh s√°ch y√™u th√≠ch c·ªßa user hi·ªán t·∫°i
    public List<WishlistResponse> getAllForCurrentUser() {
        User currentUser = userService.getCurrentUserOrThrow();
        List<Wishlist> list = wishlistRepo.findByUserId(currentUser.getId());

        return list.stream().map(w -> {
            Product p = w.getProduct();
            if (p == null) return null;

            // üñºÔ∏è L·∫•y thumbnail (∆∞u ti√™n ·∫£nh ch√≠nh n·∫øu c√≥)
            String thumbnail = p.getMedia() != null && !p.getMedia().isEmpty()
                    ? p.getMedia().stream()
                            .filter(ProductMedia::isPrimary)
                            .findFirst()
                            .orElse(p.getMedia().iterator().next())
                            .getUrl()
                    : null;

            // üí∞ L·∫•y gi√° sau gi·∫£m t·ª´ ProductVariantService
            BigDecimal price = null;
            List<ProductVariantDTO> variantDTOs = productVariantService.getVariantDTOsByProductId(p.getId());

            if (variantDTOs != null && !variantDTOs.isEmpty()) {
                // ‚úÖ l·∫•y gi√° r·∫ª nh·∫•t trong c√°c bi·∫øn th·ªÉ sau gi·∫£m
                price = variantDTOs.stream()
                        .map(ProductVariantDTO::getDiscountedPrice)
                        .min(Comparator.naturalOrder())
                        .orElse(null);
            }

            return new WishlistResponse(
                    p.getId(),
                    p.getName(),
                    price,
                    thumbnail
            );
        }).filter(r -> r != null).toList();
    }

    // ‚ûï Th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch
    public void addToWishlist(Long productId) {
        User currentUser = userService.getCurrentUserOrThrow();

        if (!productRepo.existsById(productId))
            throw new IllegalArgumentException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");

        if (wishlistRepo.existsByUserIdAndProductId(currentUser.getId(), productId))
            return; // tr√°nh th√™m tr√πng

        wishlistRepo.save(new Wishlist(currentUser.getId(), productId));
        em.flush();
    }

    // ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch
    public void removeFromWishlist(Long productId) {
        User currentUser = userService.getCurrentUserOrThrow();
        wishlistRepo.deleteByUserIdAndProductId(currentUser.getId(), productId);
        em.flush();
    }
}

