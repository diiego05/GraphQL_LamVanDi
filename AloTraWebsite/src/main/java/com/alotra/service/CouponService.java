package com.alotra.service;

import com.alotra.entity.Coupon;
import com.alotra.entity.PromotionalCampaign;
import com.alotra.entity.PromotionTarget;
import com.alotra.repository.CouponRepository;
import com.alotra.repository.PromotionalCampaignRepository;

import jakarta.transaction.Transactional;

import com.alotra.repository.PromotionTargetRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CouponService {

    private final CouponRepository couponRepository;
    private final PromotionalCampaignRepository campaignRepository;
    private final PromotionTargetRepository promotionTargetRepository;

    // üì• L·∫•y t·∫•t c·∫£ coupon
    public List<Coupon> getAll() {
        return couponRepository.findAll();
    }

    // ‚úÖ Ki·ªÉm tra h·ª£p l·ªá ng√†y hi·ªáu l·ª±c
    private void validateDateRange(Coupon coupon) {
        if (coupon.getStartAt() != null && coupon.getEndAt() != null &&
                coupon.getStartAt().isAfter(coupon.getEndAt())) {
            throw new RuntimeException("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ng√†y k·∫øt th√∫c");
        }
    }

    // ‚ûï T·∫°o coupon m·ªõi
    public Coupon create(String code, String type, BigDecimal value,
                         BigDecimal maxDiscount, BigDecimal minOrderTotal,
                         Long campaignId, Integer usageLimit) {

        Coupon coupon = new Coupon();
        coupon.setCode(code);
        coupon.setType(type);
        coupon.setValue(value);
        coupon.setMaxDiscount(maxDiscount);
        coupon.setMinOrderTotal(minOrderTotal);
        coupon.setUsageLimit(usageLimit);
        coupon.setUsedCount(0);
        coupon.setStatus("ACTIVE");
        coupon.setCreatedAt(LocalDateTime.now());

        // G·∫Øn chi·∫øn d·ªãch n·∫øu c√≥
        if (campaignId != null) {
            PromotionalCampaign campaign = campaignRepository.findById(campaignId)
                    .orElseThrow(() -> new RuntimeException("Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i"));
            coupon.setCampaign(campaign);
            coupon.setStartAt(campaign.getStartAt());
            coupon.setEndAt(campaign.getEndAt());
        }

        validateDateRange(coupon);
        return couponRepository.save(coupon);
    }

    // üõ†Ô∏è C·∫≠p nh·∫≠t coupon
    public Coupon update(Long id, String code, String type, BigDecimal value,
                         BigDecimal maxDiscount, BigDecimal minOrderTotal,
                         Long campaignId, Integer usageLimit,
                         LocalDateTime startAt, LocalDateTime endAt) {

        Coupon coupon = couponRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i"));

        coupon.setCode(code);
        coupon.setType(type);
        coupon.setValue(value);
        coupon.setMaxDiscount(maxDiscount);
        coupon.setMinOrderTotal(minOrderTotal);
        coupon.setUsageLimit(usageLimit);

        if (campaignId != null) {
            PromotionalCampaign campaign = campaignRepository.findById(campaignId)
                    .orElseThrow(() -> new RuntimeException("Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i"));
            coupon.setCampaign(campaign);
            coupon.setStartAt(campaign.getStartAt());
            coupon.setEndAt(campaign.getEndAt());
        } else {
            coupon.setCampaign(null);
            coupon.setStartAt(startAt);
            coupon.setEndAt(endAt);
        }

        validateDateRange(coupon);
        return couponRepository.save(coupon);
    }

    // üóëÔ∏è X√≥a coupon
    public void delete(Long id) {
        couponRepository.deleteById(id);
    }

    // üßæ X√°c th·ª±c coupon (d√†nh cho kh√°ch h√†ng nh·∫≠p v√†o)
    // ‚úÖ ƒê√£ b·ªï sung ki·ªÉm tra target trong campaign
    public Coupon validateCoupon(String code, BigDecimal orderTotal, List<Long> productIds) {
        Coupon coupon = couponRepository.findByCode(code)
                .orElseThrow(() -> new RuntimeException("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i"));

        LocalDateTime now = LocalDateTime.now();

        if (coupon.getStartAt() != null && coupon.getStartAt().isAfter(now))
            throw new RuntimeException("M√£ gi·∫£m gi√° ch∆∞a c√≥ hi·ªáu l·ª±c");

        if (coupon.getEndAt() != null && coupon.getEndAt().isBefore(now))
            throw new RuntimeException("M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n");

        if (coupon.getUsageLimit() != null &&
                coupon.getUsedCount() >= coupon.getUsageLimit())
            throw new RuntimeException("M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng");

        if (coupon.getMinOrderTotal() != null &&
                orderTotal.compareTo(coupon.getMinOrderTotal()) < 0)
            throw new RuntimeException("ƒê∆°n h√†ng ch∆∞a ƒë·∫°t m·ª©c t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng m√£");

        // üìå N·∫øu coupon c√≥ campaign ‚Üí ki·ªÉm tra productId c√≥ n·∫±m trong target kh√¥ng
        if (coupon.getCampaign() != null && productIds != null && !productIds.isEmpty()) {
            List<PromotionTarget> targets = promotionTargetRepository.findByCampaignId(coupon.getCampaign().getId());
            if (!targets.isEmpty()) {
                // üî∏ Ki·ªÉm tra productIds c√≥ tr√πng v·ªõi ProductId trong target kh√¥ng
                boolean match = productIds.stream().anyMatch(
                        pId -> targets.stream().anyMatch(t -> t.getProductId().equals(pId))
                );
                if (!match) {
                    throw new RuntimeException("M√£ gi·∫£m gi√° kh√¥ng √°p d·ª•ng cho s·∫£n ph·∫©m trong gi·ªè h√†ng");
                }
            }
        }

        return coupon;
    }

    // üßÆ T√≠nh s·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m
    public BigDecimal calculateDiscount(Coupon coupon, BigDecimal orderTotal) {
        if (coupon == null) return BigDecimal.ZERO;

        BigDecimal discount;
        if ("PERCENT".equalsIgnoreCase(coupon.getType())) {
            discount = orderTotal.multiply(coupon.getValue()).divide(BigDecimal.valueOf(100));
            if (coupon.getMaxDiscount() != null && discount.compareTo(coupon.getMaxDiscount()) > 0) {
                discount = coupon.getMaxDiscount();
            }
        } else {
            discount = coupon.getValue();
        }

        // Kh√¥ng bao gi·ªù v∆∞·ª£t qu√° t·ªïng ƒë∆°n h√†ng
        if (discount.compareTo(orderTotal) > 0) {
            discount = orderTotal;
        }

        return discount;
    }
    @Transactional
    public void increaseUsedCount(Long couponId) {
        if (couponId == null) return;
        couponRepository.findById(couponId).ifPresent(coupon -> {
            int current = coupon.getUsedCount() == null ? 0 : coupon.getUsedCount();
            coupon.setUsedCount(current + 1);
            couponRepository.save(coupon);
        });
    }

}
