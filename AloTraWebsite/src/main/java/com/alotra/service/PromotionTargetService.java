package com.alotra.service;

import com.alotra.dto.CampaignTargetRequest;
import com.alotra.dto.PromotionTargetDTO;
import com.alotra.entity.Product;
import com.alotra.entity.PromotionalCampaign;
import com.alotra.entity.PromotionTarget;
import com.alotra.repository.ProductRepository;
import com.alotra.repository.PromotionalCampaignRepository;
import com.alotra.repository.PromotionTargetRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PromotionTargetService {

    private final PromotionTargetRepository targetRepo;
    private final ProductRepository productRepo;
    private final PromotionalCampaignRepository campaignRepo;

    // üü¢ L·∫•y target theo Product ID (entity)
    public List<PromotionTarget> findByProductId(Long productId) {
        return targetRepo.findByProductId(productId);
    }

    // üü¢ L·∫•y target theo Campaign ID (entity)
    public List<PromotionTarget> findByCampaignId(Long campaignId) {
        return targetRepo.findByCampaign_Id(campaignId);
    }

    // üü° Th√™m m·ªõi m·ªôt target
    public PromotionTarget save(PromotionTarget t) {
        return targetRepo.save(t);
    }

    // üî¥ X√≥a 1 target theo ID
    public void delete(Long id) {
        targetRepo.deleteById(id);
    }

    // üî¥ X√≥a t·∫•t c·∫£ target theo Campaign ID
    public void deleteByCampaignId(Long campaignId) {
        targetRepo.deleteAll(findByCampaignId(campaignId));
    }

    // üß≠ G√°n ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng cho 1 chi·∫øn d·ªãch
    public void setTargetsForCampaign(Long campaignId, CampaignTargetRequest request) {
        PromotionalCampaign campaign = campaignRepo.findById(campaignId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch khuy·∫øn m√£i"));

        // X√≥a c√°c target c≈© tr∆∞·ªõc khi l∆∞u m·ªõi
        deleteByCampaignId(campaignId);

        List<Product> products;
        switch (request.getTargetType()) {
            case "ALL_PRODUCTS" -> {
                products = productRepo.findAll();
            }
            case "CATEGORY" -> {
                if (request.getCategoryId() == null) {
                    throw new IllegalArgumentException("categoryId kh√¥ng ƒë∆∞·ª£c null khi ch·ªçn CATEGORY");
                }
                products = productRepo.findByCategory_Id(request.getCategoryId());
            }
            case "PRODUCTS" -> {
                if (request.getProductIds() == null || request.getProductIds().isEmpty()) {
                    throw new IllegalArgumentException("Danh s√°ch productIds kh√¥ng ƒë∆∞·ª£c r·ªóng khi ch·ªçn PRODUCTS");
                }
                products = productRepo.findAllById(request.getProductIds());
            }
            default -> throw new IllegalArgumentException("Lo·∫°i ƒë·ªëi t∆∞·ª£ng √°p d·ª•ng kh√¥ng h·ª£p l·ªá");
        }

        // T·∫°o list target m·ªõi d·ª±a theo productId
        List<PromotionTarget> targets = products.stream()
                .map(p -> PromotionTarget.builder()
                        .campaign(campaign)
                        .productId(p.getId())
                        .targetType(request.getTargetType())
                        .build())
                .toList();

        targetRepo.saveAll(targets);
    }

    // üÜï Tr·∫£ v·ªÅ DTO theo Campaign ID
    public List<PromotionTargetDTO> getTargetDTOsByCampaign(Long campaignId) {
        return findByCampaignId(campaignId).stream()
                .map(t -> new PromotionTargetDTO(
                        t.getId(),
                        t.getCampaign() != null ? t.getCampaign().getId() : null,
                        t.getCampaign() != null ? t.getCampaign().getName() : null,
                        t.getTargetType(),
                        t.getProductId()
                ))
                .collect(Collectors.toList());
    }

    // üÜï Tr·∫£ v·ªÅ DTO theo Product ID
    public List<PromotionTargetDTO> getTargetDTOsByProduct(Long productId) {
        return findByProductId(productId).stream()
                .map(t -> new PromotionTargetDTO(
                        t.getId(),
                        t.getCampaign() != null ? t.getCampaign().getId() : null,
                        t.getCampaign() != null ? t.getCampaign().getName() : null,
                        t.getTargetType(),
                        t.getProductId()
                ))
                .collect(Collectors.toList());
    }
}
